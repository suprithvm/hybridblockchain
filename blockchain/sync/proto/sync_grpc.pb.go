// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: proto/sync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChainSync_GetChainInfo_FullMethodName = "/sync.ChainSync/GetChainInfo"
	ChainSync_StreamBlocks_FullMethodName = "/sync.ChainSync/StreamBlocks"
	ChainSync_SyncUTXOSet_FullMethodName  = "/sync.ChainSync/SyncUTXOSet"
	ChainSync_VerifyState_FullMethodName  = "/sync.ChainSync/VerifyState"
)

// ChainSyncClient is the client API for ChainSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChainSync service handles blockchain synchronization
type ChainSyncClient interface {
	// GetChainInfo returns current blockchain information
	GetChainInfo(ctx context.Context, in *ChainInfoRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error)
	// StreamBlocks streams blocks from start to end height
	StreamBlocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockResponse], error)
	// SyncUTXOSet synchronizes UTXO set in chunks
	SyncUTXOSet(ctx context.Context, in *UTXORequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UTXOResponse], error)
	// VerifyState verifies state consistency
	VerifyState(ctx context.Context, in *VerifyStateRequest, opts ...grpc.CallOption) (*VerifyStateResponse, error)
}

type chainSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewChainSyncClient(cc grpc.ClientConnInterface) ChainSyncClient {
	return &chainSyncClient{cc}
}

func (c *chainSyncClient) GetChainInfo(ctx context.Context, in *ChainInfoRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChainInfoResponse)
	err := c.cc.Invoke(ctx, ChainSync_GetChainInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainSyncClient) StreamBlocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChainSync_ServiceDesc.Streams[0], ChainSync_StreamBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlockRequest, BlockResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChainSync_StreamBlocksClient = grpc.ServerStreamingClient[BlockResponse]

func (c *chainSyncClient) SyncUTXOSet(ctx context.Context, in *UTXORequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UTXOResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChainSync_ServiceDesc.Streams[1], ChainSync_SyncUTXOSet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UTXORequest, UTXOResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChainSync_SyncUTXOSetClient = grpc.ServerStreamingClient[UTXOResponse]

func (c *chainSyncClient) VerifyState(ctx context.Context, in *VerifyStateRequest, opts ...grpc.CallOption) (*VerifyStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyStateResponse)
	err := c.cc.Invoke(ctx, ChainSync_VerifyState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainSyncServer is the server API for ChainSync service.
// All implementations must embed UnimplementedChainSyncServer
// for forward compatibility.
//
// ChainSync service handles blockchain synchronization
type ChainSyncServer interface {
	// GetChainInfo returns current blockchain information
	GetChainInfo(context.Context, *ChainInfoRequest) (*ChainInfoResponse, error)
	// StreamBlocks streams blocks from start to end height
	StreamBlocks(*BlockRequest, grpc.ServerStreamingServer[BlockResponse]) error
	// SyncUTXOSet synchronizes UTXO set in chunks
	SyncUTXOSet(*UTXORequest, grpc.ServerStreamingServer[UTXOResponse]) error
	// VerifyState verifies state consistency
	VerifyState(context.Context, *VerifyStateRequest) (*VerifyStateResponse, error)
	mustEmbedUnimplementedChainSyncServer()
}

// UnimplementedChainSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChainSyncServer struct{}

func (UnimplementedChainSyncServer) GetChainInfo(context.Context, *ChainInfoRequest) (*ChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}
func (UnimplementedChainSyncServer) StreamBlocks(*BlockRequest, grpc.ServerStreamingServer[BlockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedChainSyncServer) SyncUTXOSet(*UTXORequest, grpc.ServerStreamingServer[UTXOResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SyncUTXOSet not implemented")
}
func (UnimplementedChainSyncServer) VerifyState(context.Context, *VerifyStateRequest) (*VerifyStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyState not implemented")
}
func (UnimplementedChainSyncServer) mustEmbedUnimplementedChainSyncServer() {}
func (UnimplementedChainSyncServer) testEmbeddedByValue()                   {}

// UnsafeChainSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainSyncServer will
// result in compilation errors.
type UnsafeChainSyncServer interface {
	mustEmbedUnimplementedChainSyncServer()
}

func RegisterChainSyncServer(s grpc.ServiceRegistrar, srv ChainSyncServer) {
	// If the following call pancis, it indicates UnimplementedChainSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChainSync_ServiceDesc, srv)
}

func _ChainSync_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSyncServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainSync_GetChainInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSyncServer).GetChainInfo(ctx, req.(*ChainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainSync_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChainSyncServer).StreamBlocks(m, &grpc.GenericServerStream[BlockRequest, BlockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChainSync_StreamBlocksServer = grpc.ServerStreamingServer[BlockResponse]

func _ChainSync_SyncUTXOSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UTXORequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChainSyncServer).SyncUTXOSet(m, &grpc.GenericServerStream[UTXORequest, UTXOResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChainSync_SyncUTXOSetServer = grpc.ServerStreamingServer[UTXOResponse]

func _ChainSync_VerifyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainSyncServer).VerifyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainSync_VerifyState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainSyncServer).VerifyState(ctx, req.(*VerifyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainSync_ServiceDesc is the grpc.ServiceDesc for ChainSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sync.ChainSync",
	HandlerType: (*ChainSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChainInfo",
			Handler:    _ChainSync_GetChainInfo_Handler,
		},
		{
			MethodName: "VerifyState",
			Handler:    _ChainSync_VerifyState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlocks",
			Handler:       _ChainSync_StreamBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncUTXOSet",
			Handler:       _ChainSync_SyncUTXOSet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/sync.proto",
}

const (
	NetworkSync_DiscoverPeers_FullMethodName        = "/sync.NetworkSync/DiscoverPeers"
	NetworkSync_StreamStatus_FullMethodName         = "/sync.NetworkSync/StreamStatus"
	NetworkSync_PropagateTransaction_FullMethodName = "/sync.NetworkSync/PropagateTransaction"
)

// NetworkSyncClient is the client API for NetworkSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NetworkSync service handles network-related operations
type NetworkSyncClient interface {
	// DiscoverPeers discovers new peers
	DiscoverPeers(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PeerInfo], error)
	// StreamStatus streams network status updates
	StreamStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkStatus], error)
	// PropagateTransaction broadcasts a transaction
	PropagateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*PropagateResponse, error)
}

type networkSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkSyncClient(cc grpc.ClientConnInterface) NetworkSyncClient {
	return &networkSyncClient{cc}
}

func (c *networkSyncClient) DiscoverPeers(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PeerInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetworkSync_ServiceDesc.Streams[0], NetworkSync_DiscoverPeers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DiscoverRequest, PeerInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkSync_DiscoverPeersClient = grpc.ServerStreamingClient[PeerInfo]

func (c *networkSyncClient) StreamStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetworkSync_ServiceDesc.Streams[1], NetworkSync_StreamStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StatusRequest, NetworkStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkSync_StreamStatusClient = grpc.ServerStreamingClient[NetworkStatus]

func (c *networkSyncClient) PropagateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*PropagateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PropagateResponse)
	err := c.cc.Invoke(ctx, NetworkSync_PropagateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkSyncServer is the server API for NetworkSync service.
// All implementations must embed UnimplementedNetworkSyncServer
// for forward compatibility.
//
// NetworkSync service handles network-related operations
type NetworkSyncServer interface {
	// DiscoverPeers discovers new peers
	DiscoverPeers(*DiscoverRequest, grpc.ServerStreamingServer[PeerInfo]) error
	// StreamStatus streams network status updates
	StreamStatus(*StatusRequest, grpc.ServerStreamingServer[NetworkStatus]) error
	// PropagateTransaction broadcasts a transaction
	PropagateTransaction(context.Context, *Transaction) (*PropagateResponse, error)
	mustEmbedUnimplementedNetworkSyncServer()
}

// UnimplementedNetworkSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkSyncServer struct{}

func (UnimplementedNetworkSyncServer) DiscoverPeers(*DiscoverRequest, grpc.ServerStreamingServer[PeerInfo]) error {
	return status.Errorf(codes.Unimplemented, "method DiscoverPeers not implemented")
}
func (UnimplementedNetworkSyncServer) StreamStatus(*StatusRequest, grpc.ServerStreamingServer[NetworkStatus]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStatus not implemented")
}
func (UnimplementedNetworkSyncServer) PropagateTransaction(context.Context, *Transaction) (*PropagateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagateTransaction not implemented")
}
func (UnimplementedNetworkSyncServer) mustEmbedUnimplementedNetworkSyncServer() {}
func (UnimplementedNetworkSyncServer) testEmbeddedByValue()                     {}

// UnsafeNetworkSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkSyncServer will
// result in compilation errors.
type UnsafeNetworkSyncServer interface {
	mustEmbedUnimplementedNetworkSyncServer()
}

func RegisterNetworkSyncServer(s grpc.ServiceRegistrar, srv NetworkSyncServer) {
	// If the following call pancis, it indicates UnimplementedNetworkSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkSync_ServiceDesc, srv)
}

func _NetworkSync_DiscoverPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiscoverRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkSyncServer).DiscoverPeers(m, &grpc.GenericServerStream[DiscoverRequest, PeerInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkSync_DiscoverPeersServer = grpc.ServerStreamingServer[PeerInfo]

func _NetworkSync_StreamStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkSyncServer).StreamStatus(m, &grpc.GenericServerStream[StatusRequest, NetworkStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkSync_StreamStatusServer = grpc.ServerStreamingServer[NetworkStatus]

func _NetworkSync_PropagateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkSyncServer).PropagateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkSync_PropagateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkSyncServer).PropagateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkSync_ServiceDesc is the grpc.ServiceDesc for NetworkSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sync.NetworkSync",
	HandlerType: (*NetworkSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PropagateTransaction",
			Handler:    _NetworkSync_PropagateTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiscoverPeers",
			Handler:       _NetworkSync_DiscoverPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamStatus",
			Handler:       _NetworkSync_StreamStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/sync.proto",
}
