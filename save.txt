PS C:\Users\supri\Desktop\blockchain\blockchain-core> go run main.go
=== Wallet Creation ===

New Wallet Created Successfully!
Wallet Address: supa54119351522ca4e4e7b6191f10b
Mnemonic: avoid alpha ancient box bless approve attitude beyond army always bread animal
Private Key (hex): 221ee8d90605cd578e54d3b839d51df4d7cf718870ba6c99c9e57d5f6a12b9e1
Public Key (hex): 81d90f381c8d5bd923687b0f5966d63a332e85e36ca945ee34ccad3c6393fc7c33673f5e8fd013ab597e4c6a744c3b5d5a39fe94113cc142eb7b1c7a1a6ae6d9

Wallet saved successfully to file: my_wallet.json

=== Wallet Recovery ===
Enter your 12-word mnemonic to recover the wallet: avoid alpha ancient box bless approve attitude beyond army always bread animal

Wallet Recovered Successfully!
Recovered Wallet Address: supa54119351522ca4e4e7b6191f10b
Mnemonic: avoid alpha ancient box bless approve attitude beyond army always bread animal
Private Key (hex): 221ee8d90605cd578e54d3b839d51df4d7cf718870ba6c99c9e57d5f6a12b9e1
Public Key (hex): 81d90f381c8d5bd923687b0f5966d63a332e85e36ca945ee34ccad3c6393fc7c33673f5e8fd013ab597e4c6a744c3b5d5a39fe94113cc142eb7b1c7a1a6ae6d9

Success: The recovered wallet matches the originally created wallet!

=== HD Wallet Testing ===
Generating child wallets from the master key...

HD Wallet Created Successfully! Derived 5 child wallets:
Child Wallet 1 Address: supd523de3cbb6d2f41cd9c8f0908f1
Child Wallet 2 Address: sup03e2409f681de279ddef80ddad35
Child Wallet 3 Address: sup40b5a8688545eb66fa2816369374
Child Wallet 4 Address: sup1a5b27070e57141e1bace3a9d7ba
Child Wallet 5 Address: sup27b0aaf012461a0068ff44bcc8e9

All tests completed successfully. Thank you for using the Wallet System!






among amazing atom arena account bounce aim border borrow bottom awkward best




/ip4/127.0.0.1/tcp/59390/p2p/12D3KooWR2G1DaFktYhDKKbnhk9mKfjj1xgvWAAZFk3Faab1tM4J


avoid alpha ancient box bless approve attitude beyond army always bread animal







package main

import (
	"context"
	"log"
	"os"
	"path/filepath"
	"time"

	"blockchain-core/blockchain"
)

// GetOutboundIP gets the preferred outbound IP of this machine
func GetOutboundIP() string {
	return "49.204.110.41" // Set to the provided public IP
}

func main() {
	log.Printf("\nüîë Node Identity Configuration")
	log.Printf("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

	// Get the current working directory
	currentDir, err := os.Getwd()
	if err != nil {
		log.Fatalf("‚ùå Failed to get current directory: %v", err)
	}

	// Create a persistent directory for node data if it doesn't exist
	nodeDataDir := filepath.Join(currentDir, "node_data")
	if err := os.MkdirAll(nodeDataDir, 0755); err != nil {
		log.Fatalf("‚ùå Failed to create node data directory: %v", err)
	}

	// Store key file in the node_data directory
	keyFilePath := filepath.Join(nodeDataDir, "bootnode.key")
	peerStorePath := filepath.Join(nodeDataDir, "peers.json")

	log.Printf("üìÇ Node Data Directory: %s", nodeDataDir)
	log.Printf("üîê Key File Location: %s", keyFilePath)
	log.Printf("üë• Peer Store Location: %s", peerStorePath)

	config := blockchain.BootstrapNodeConfig{
		ListenPort:         50505,
		PublicIP:           GetOutboundIP(),
		KeyFile:            keyFilePath,
		PeerStoreFile:      peerStorePath,
		EnablePeerExchange: true,
		EnableNAT:          true,
	}

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	node, err := blockchain.NewBootstrapNode(ctx, &config)
	if err != nil {
		log.Fatalf("‚ùå Failed to create bootnode: %v", err)
	}

	// Start the bootnode
	if err := node.Start(); err != nil {
		log.Fatalf("‚ùå Failed to start bootnode: %v", err)
	}
	log.Println("‚úÖ Bootnode is running...")

	// Keep the application running
	select {}
}
